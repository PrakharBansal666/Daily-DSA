PS:
In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.
If the town judge exists, then:
      1. The town judge trusts nobody.
      2. Everybody (except for the town judge) trusts the town judge.
      3. There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.
If a trust relationship does not exist in trust array, then such a trust relationship does not exist.
Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

Approach:
      class Solution {
      public:
          int findJudge(int n, vector<vector<int>>& trust) {
              vector<int> in_deg(n+1, 0);
              vector<int> out_deg(n+1, 0);
              for(int i = 0;i<trust.size();i++){
                  out_deg[trust[i][0]]++;
                  in_deg[trust[i][1]]++;
              }
              for(int i = 1; i<n+1;i++){
                  if(in_deg[i] == n-1 && out_deg[i] == 0){
                      return i;
                  }
              }
              return -1;
          }
      };

Runtime: 120 ms
Memory: 64.38 MB
