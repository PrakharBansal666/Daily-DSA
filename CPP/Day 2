PS:
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Approach 1:
      class Solution {
      public:
          int missingNumber(vector<int>& nums) {
              int sum = accumulate(nums.begin(), nums.end(), 0);
              int n = nums.size();
              return ((n*(n+1)/2) - sum); 
          }
      };
Runtime: 16 ms
Memory: 20.21 MB

Approach 2:
      class Solution {
      public:
          int missingNumber(vector<int>& nums) {
              sort(nums.begin(), nums.end());
              int n = nums.size();
              if(nums[0] != 0) return 0;
              if(nums[n - 1] != n) return n;
              for(int i=0;i<n;i++){
                  if(i != nums[i]){
                      return i;
                  }
              }
          return -1;
          }
      };
Runtime: 16 ms
Memory: 20.93 MB
