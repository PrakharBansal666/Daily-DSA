131. Palindrome Partitioning

PS:
Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.

Approach:

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result;
        vector<string> path;
        backtrack(s, 0, path, result);
        return result;
    }
    
    void backtrack(string& s, int i, vector<string>& path, vector<vector<string>>& result){
        if(i == s.length()){
            result.push_back(path);
            return;
        }
        for(int j = i+1; j <= s.length(); j++){
            if(isPalindrome(s, i, j-1)){
                path.push_back(s.substr(i, j-i));
                backtrack(s, j, path, result);
                path.pop_back();
            }
        }
    }

    bool isPalindrome(string s, int left, int right){
        while(left <= right){
            if(s[left] != s[right]){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
};

Runtime: 90 ms
Memory: 56.96 MB
